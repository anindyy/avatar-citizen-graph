{"version":3,"sources":["component/Form.js","component/GraphOptions.js","component/DataCleaner.js","component/Result.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","state","userInput","payload","handleChange","bind","handleClick","data","this","setState","onPayloadChange","e","target","value","require","default","get","then","response","saveData","catch","id","message","className","TextField","label","type","InputLabelProps","shrink","variant","size","onChange","Button","color","disableElevation","onClick","React","Component","config","height","width","nodeHighlightBehavior","highlightOpacity","d3","alphaTarget","gravity","linkLength","linkStrength","node","labelProperty","link","highlightColor","removeDuplicate","friends","selfId","result","filter","v","i","a","findIndex","f","index","map","indexOf","splice","mapNode","person","element","name","mapEdge","friend","source","Result","error","expanded","graph","clicked","handleNodeClick","rearrangeNode","clickedNodeId","newNodes","newLinks","cleaned","newData","existing","newFriends","x","existingID","nodes","forEach","push","concat","links","cleanAdditional","err","clickedIndex","forceUpdate","onClickNode","cleanInitial","App","handlePayloadChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.e412ff99.chunk.js","sourcesContent":["import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport \"./Form.css\";\r\n\r\nclass Form extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { \r\n            userInput: '',\r\n            payload: ''\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    saveData(data) {\r\n        this.setState({\r\n            payload: data\r\n        });\r\n        // save data from Form to App's state\r\n        this.props.onPayloadChange(data);\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({\r\n            userInput: e.target.value\r\n        });\r\n    }\r\n\r\n    handleClick(e) {\r\n        const axios = require('axios').default;\r\n        let url = 'https://avatar.labpro.dev/friends/';\r\n        axios.get(`${url}${this.state.userInput}`)\r\n            .then(response => this.saveData(response.data.payload))\r\n            .catch(response => this.saveData({\r\n                id: 'e',\r\n                message: response.message\r\n            }));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"form-wrapper\">\r\n                <div className=\"form\">\r\n                    <TextField\r\n                        label = \"Citizen ID\"\r\n                        type = \"number\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant = \"outlined\"\r\n                        size = \"small\"\r\n                        onChange = {this.handleChange}\r\n                    />\r\n                    <Button \r\n                        variant = \"contained\" \r\n                        size = \"medium\"\r\n                        color = \"primary\"\r\n                        disableElevation\r\n                        onClick = {this.handleClick}>\r\n                            Map Friends\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form;","var config = {\r\n    height: 2000,\r\n    width: 2000,\r\n    nodeHighlightBehavior: true,\r\n    highlightOpacity: 0.5,\r\n    d3: { // commented values are defaults\r\n        alphaTarget: 0.05, // 0.05\r\n        gravity: -100, // -100\r\n        linkLength: 100, // 100\r\n        linkStrength: 1 // 1\r\n    },\r\n    node: {\r\n        labelProperty: 'name'\r\n    },\r\n    link: {\r\n        highlightColor: \"#828282\"\r\n    }\r\n};\r\n\r\nexport { config }","function cleanInitial(data) {\r\n    var friends = removeDuplicate(data.friends, data.id);\r\n    \r\n    // create links\r\n    const links = friends.map(\r\n        function(x) { return mapEdge(data, x) }\r\n    );\r\n\r\n    // adds self to nodes list\r\n    friends.push({\r\n        id: data.id,\r\n        name: data.name,\r\n        element: data.element\r\n    });\r\n    const nodes = friends.map(mapNode);\r\n    \r\n    return { nodes, links };\r\n}\r\n\r\nfunction cleanAdditional(newData, existing) {\r\n    var newFriends = removeDuplicate(newData.friends);\r\n\r\n    // create links\r\n    var newLinks = newFriends.map(\r\n        function(x) { return mapEdge(newData, x) }\r\n    );\r\n\r\n    // check existing nodes\r\n    var existingID = existing.nodes.map(function(e) { return e.id });    \r\n    newFriends.forEach(function(v, i) {\r\n        var id = newFriends[i].id;\r\n        if (existingID.indexOf(id) > -1) {\r\n            newFriends.splice(i, 1);\r\n        }\r\n    });\r\n\r\n    // add self to node list if they're not there\r\n    const index = existingID.indexOf(newData.id);\r\n    if (index === -1) {\r\n        newFriends.push({\r\n            id: newData.id,\r\n            name: newData.name,\r\n            element: newData.element\r\n        });\r\n    }\r\n    var newNodes = newFriends.map(mapNode);\r\n\r\n    // merge with existing\r\n    var nodes = newNodes.concat(existing.nodes);\r\n    var links = newLinks.concat(existing.links);\r\n\r\n    return { nodes, links };\r\n}\r\n\r\nfunction removeDuplicate(friends, selfId) {\r\n    // removes duplicates\r\n    var result = friends.filter((v, i, a) => \r\n        a.findIndex(f => f.id === v.id) === i);\r\n\r\n    // excludes self from friends list\r\n    const index = result.map(function(e) { return e.id }).indexOf(selfId);\r\n    if (index > -1) {\r\n        result.splice(index, 1);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction mapNode(person) {\r\n    let color = '';\r\n    switch (person.element) {\r\n        case 'fire':\r\n            color = '#ff6512';\r\n            break;\r\n        case 'water':\r\n            color = '#41a5f2';\r\n            break;\r\n        case 'air':\r\n            color = '#b4cecf';\r\n            break;\r\n        case 'earth':\r\n            color = '#29c434';\r\n            break;\r\n        default:\r\n            color = '#3b3b3b'\r\n            break;\r\n    }\r\n    \r\n    return ({\r\n        color: color,\r\n        id: person.id,\r\n        name: person.name\r\n    })\r\n}\r\n\r\nfunction mapEdge(person, friend) {\r\n    return ({\r\n        source: person.id,\r\n        target: friend.id\r\n    });\r\n}\r\n\r\nexport { cleanInitial, cleanAdditional }","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Graph } from 'react-d3-graph';\r\nimport { config } from './GraphOptions';\r\nimport { cleanInitial, cleanAdditional } from './DataCleaner';\r\nimport \"./Result.css\";\r\n\r\nclass Result extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            error: false,\r\n            id: \"0\",\r\n            expanded: [],\r\n            graph: {},\r\n            clicked: {}\r\n        }\r\n\r\n        this.handleNodeClick = this.handleNodeClick.bind(this);\r\n        this.rearrangeNode = this.rearrangeNode.bind(this);\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (!props.data || props.data.id === 'e') {\r\n            return {\r\n                error: true,\r\n                id: props.data.id\r\n            };\r\n        }\r\n\r\n        if (props.data.id !== state.id) {\r\n            var { nodes, links } = cleanInitial(props.data);\r\n            return {\r\n                error: false,\r\n                id: props.data.id,\r\n                expanded: [props.data.id],\r\n                graph: {\r\n                    nodes: nodes,\r\n                    links: links\r\n                },\r\n                clicked: {\r\n                    id: props.data.id,\r\n                    name: props.data.name,\r\n                    element: props.data.element\r\n                }\r\n            };\r\n        }\r\n        \r\n        return state;\r\n    }\r\n\r\n    handleNodeClick(clickedNodeId) {\r\n        var newNodes, newLinks;\r\n\r\n        if (this.state.expanded.indexOf(clickedNodeId) === -1) {\r\n            const axios = require('axios').default;\r\n            let url = 'https://avatar.labpro.dev/friends/';\r\n            axios.get(`${url}${clickedNodeId}`)\r\n                .then(response => {\r\n                    var cleaned = cleanAdditional(response.data.payload, this.state.graph);\r\n                    newNodes = cleaned.nodes;\r\n                    newLinks = cleaned.links;\r\n\r\n                    // save expanded nodes to avoid it being reexpanded\r\n                    var expanded = this.state.expanded;\r\n                    expanded.push(clickedNodeId);\r\n\r\n                    this.setState({\r\n                        error: false,\r\n                        id: this.state.id,\r\n                        expanded: expanded,\r\n                        graph: {\r\n                            nodes: newNodes,\r\n                            links: newLinks\r\n                        },\r\n                        clicked: {\r\n                            id: response.data.payload.id,\r\n                            name: response.data.payload.name,\r\n                            element: response.data.payload.element\r\n                        }\r\n                    });\r\n                })\r\n                .catch(err => {\r\n                    this.setState({\r\n                        error: true\r\n                    });\r\n                });\r\n        }\r\n        else {\r\n            // if node has already expanded before, don't send a new request\r\n            // just change the information box at the bottom corner\r\n            var indexes = this.state.graph.nodes.map(e => e.id);\r\n            var clickedIndex = indexes.indexOf(clickedNodeId);\r\n            var data = this.state.graph.nodes[clickedIndex];\r\n            var element = '';\r\n            \r\n            switch (data.color) {\r\n                case '#ff6512':\r\n                    element = 'fire';\r\n                    break;\r\n                case '#41a5f2':\r\n                    element = 'water';\r\n                    break;\r\n                case '#b4cecf':\r\n                    element = 'air';\r\n                    break;\r\n                case '#29c434':\r\n                    element = 'earth';\r\n                    break;\r\n                default:\r\n                    element = ''\r\n                    break;\r\n            }\r\n\r\n            this.setState({\r\n                error: false,\r\n                id: this.state.id,\r\n                expanded: this.state.expanded,\r\n                graph: this.state.graph,\r\n                clicked: {\r\n                    id: data.id,\r\n                    name: data.name,\r\n                    element: element\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    rearrangeNode() {\r\n        this.forceUpdate();\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.data) {\r\n            return null;\r\n        }\r\n        else if (this.state.error) {\r\n            return (\r\n                <div className=\"errMessage\">\r\n                    <b>no data found.</b>\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n           return (\r\n               <div className=\"result-wrapper\">\r\n                    <div className=\"result-text\">\r\n                        <div><strong>ID: </strong>{this.state.clicked.id}</div>\r\n                        <div><strong>Name: </strong>{this.state.clicked.name}</div>\r\n                        <div><strong>Element: </strong>{this.state.clicked.element}</div>\r\n                        <Button\r\n                        size = \"small\"\r\n                        color = \"primary\"\r\n                        onClick = {this.rearrangeNode}>\r\n                            Rearrange Nodes\r\n                        </Button>\r\n                    </div>\r\n                    <div className=\"result-graph\">\r\n                        <Graph\r\n                            id = {`G${this.state.id}`}\r\n                            data = { this.state.graph }\r\n                            config = { config }\r\n                            onClickNode = { this.handleNodeClick }\r\n                        />\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Result;","import React from 'react';\r\nimport Form from './component/Form';\r\nimport Result from './component/Result';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      payload: ''\r\n    };\r\n\r\n    this.handlePayloadChange = this.handlePayloadChange.bind(this);\r\n  }\r\n\r\n  handlePayloadChange(data) {\r\n    this.setState({\r\n      payload: data\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Form onPayloadChange = {this.handlePayloadChange} />\r\n        <Result data = {this.state.payload} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'fontsource-roboto';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}